{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { uiActions } from './uiReducer';\nimport axios from 'axios';\nconst initialState = {\n  cartItems: [],\n  totalQuantity: 0,\n  showCart: false\n};\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState,\n  reducers: {\n    addItemToCart(state, action) {\n      const newItem = action.payload;\n      const existingItem = state.cartItems.find(item => item.id === newItem.id);\n\n      if (!existingItem) {\n        state.cartItems.push({\n          title: newItem.title,\n          price: newItem.price,\n          quantity: 1,\n          id: newItem.id\n        });\n      } else {\n        existingItem.quantity++;\n      }\n\n      state.totalQuantity++;\n    },\n\n    removeItemFromCart(state, action) {\n      const itemRemoved = action.payload;\n      const existingItem = state.cartItems.find(item => item.id === itemRemoved.id);\n\n      if (existingItem.quantity === 1) {\n        state.cartItems = state.cartItems.filter(item => item.id !== itemRemoved.id);\n      } else {\n        existingItem.quantity--;\n      }\n\n      state.totalQuantity++;\n    },\n\n    toggleCart(state) {\n      state.showCart = !state.showCart;\n    }\n\n  }\n});\nexport const sendCartData = async cart => {\n  return async dispatch => {\n    dispatch(uiActions.showNotification({\n      status: 'pending',\n      title: 'Sending...',\n      message: 'Sending cart data!'\n    }));\n\n    const sendRequest = async () => {\n      const response = await axios.put('https://redux-max-project-default-rtdb.firebaseio.com/cart.json', {\n        body: JSON.stringify(cart)\n      });\n\n      if (!response.ok) {\n        throw new Error('Sending cart data failed.');\n      }\n    };\n\n    try {\n      await sendRequest();\n      dispatch(uiActions.showNotification({\n        status: 'success',\n        title: 'Success!',\n        message: 'Sent cart data successfully!'\n      }));\n    } catch (error) {\n      dispatch(uiActions.showNotification({\n        status: 'error',\n        title: 'Error!',\n        message: 'Sending cart data failed!'\n      }));\n    }\n  };\n};\nexport const cartActions = cartSlice.actions;\nexport const cartReducer = cartSlice.reducer;","map":{"version":3,"names":["createSlice","uiActions","axios","initialState","cartItems","totalQuantity","showCart","cartSlice","name","reducers","addItemToCart","state","action","newItem","payload","existingItem","find","item","id","push","title","price","quantity","removeItemFromCart","itemRemoved","filter","toggleCart","sendCartData","cart","dispatch","showNotification","status","message","sendRequest","response","put","body","JSON","stringify","ok","Error","error","cartActions","actions","cartReducer","reducer"],"sources":["C:/Users/T-GAMER/Desktop/01-starting-project/src/store/cartReducer.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\nimport { uiActions } from './uiReducer';\r\nimport axios from 'axios';\r\n\r\nconst initialState = { cartItems: [], totalQuantity: 0, showCart: false };\r\n\r\nconst cartSlice = createSlice({\r\n    name: 'cart',\r\n    initialState,\r\n    reducers: {\r\n        addItemToCart(state, action) {\r\n            const newItem = action.payload;\r\n            const existingItem = state.cartItems.find(\r\n                (item) => item.id === newItem.id\r\n            );\r\n            if (!existingItem) {\r\n                state.cartItems.push({\r\n                    title: newItem.title,\r\n                    price: newItem.price,\r\n                    quantity: 1,\r\n                    id: newItem.id,\r\n                });\r\n            } else {\r\n                existingItem.quantity++;\r\n            }\r\n            state.totalQuantity++;\r\n        },\r\n        removeItemFromCart(state, action) {\r\n            const itemRemoved = action.payload;\r\n            const existingItem = state.cartItems.find(\r\n                (item) => item.id === itemRemoved.id\r\n            );\r\n            if (existingItem.quantity === 1) {\r\n                state.cartItems = state.cartItems.filter(\r\n                    (item) => item.id !== itemRemoved.id\r\n                );\r\n            } else {\r\n                existingItem.quantity--;\r\n            }\r\n            state.totalQuantity++;\r\n        },\r\n        toggleCart(state) {\r\n            state.showCart = !state.showCart;\r\n        },\r\n    },\r\n});\r\n\r\nexport const sendCartData = async (cart) => {\r\n    return async (dispatch) => {\r\n        dispatch(\r\n            uiActions.showNotification({\r\n                status: 'pending',\r\n                title: 'Sending...',\r\n                message: 'Sending cart data!',\r\n            })\r\n        );\r\n\r\n        const sendRequest = async () => {\r\n            const response = await axios.put(\r\n                'https://redux-max-project-default-rtdb.firebaseio.com/cart.json',\r\n                {\r\n                    body: JSON.stringify(cart),\r\n                }\r\n            );\r\n\r\n            if (!response.ok) {\r\n                throw new Error('Sending cart data failed.');\r\n            }\r\n        };\r\n\r\n        try {\r\n            await sendRequest();\r\n\r\n            dispatch(\r\n                uiActions.showNotification({\r\n                    status: 'success',\r\n                    title: 'Success!',\r\n                    message: 'Sent cart data successfully!',\r\n                })\r\n            );\r\n        } catch (error) {\r\n            dispatch(\r\n                uiActions.showNotification({\r\n                    status: 'error',\r\n                    title: 'Error!',\r\n                    message: 'Sending cart data failed!',\r\n                })\r\n            );\r\n        }\r\n    };\r\n};\r\n\r\nexport const cartActions = cartSlice.actions;\r\nexport const cartReducer = cartSlice.reducer;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}